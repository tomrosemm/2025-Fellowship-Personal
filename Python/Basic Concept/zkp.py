import hashlib

# Import ZoKrates interface functions for future use
from zokrates_interface import (
    run_zokrates_compile,
    run_zokrates_setup,
    run_zokrates_compute_witness,
    run_zokrates_generate_proof,
    run_zokrates_verify
)

def generate_zkp_proof_simulated(otp, timestamp):
    """
    Simulate ZoKrates proof generation (hash-based).

    Args:
        otp (str): The one-time password generated by the vehicle.
        timestamp (int): The timestamp used in OTP generation.

    Returns:
        str: A simulated ZKP proof (hash of OTP and timestamp).
    """
    combined = f"{otp}{timestamp}".encode()
    proof = hashlib.sha256(combined).hexdigest()
    return proof

def generate_zkp_proof_real(circuit_path, otp, timestamp):
    """
    Generate a real ZKP proof using the ZoKrates CLI interface.

    Args:
        circuit_path (str): Path to the ZoKrates .zok circuit file.
        otp (str): The one-time password generated by the vehicle.
        timestamp (int): The timestamp used in OTP generation.

    Returns:
        bool: True if proof is valid, False otherwise.
    """
    if not run_zokrates_compile(circuit_path):
        return False
    if not run_zokrates_setup():
        return False
    args = [str(otp), str(timestamp)]
    if not run_zokrates_compute_witness(args):
        return False
    if not run_zokrates_generate_proof():
        return False
    return run_zokrates_verify()

# For backward compatibility, you can alias the simulated version as the default:
generate_zkp_proof = generate_zkp_proof_simulated
