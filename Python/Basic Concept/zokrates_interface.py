"""
zokrates_interface.py

Purpose:
    Provides an interface for generating and verifying zero-knowledge proofs (ZKPs) using ZoKrates, both in simulation and via CLI commands.

Methodology:
    - Simulates ZKP generation by hashing OTP and timestamp.
    - Provides wrapper functions to compile ZoKrates circuits, set up keys, compute witnesses, generate proofs, and verify proofs using the ZoKrates CLI.
    - Designed to be used by Vehicle and RSU classes for proof generation and verification.
"""

import hashlib  # For hashing as a placeholder for ZKP
import subprocess  # For running ZoKrates CLI commands
import os  # For file path operations if needed

def generate_zkp_proof(otp, timestamp):
    """
    Simulate ZoKrates proof generation.

    Args:
        otp (str): The one-time password generated by the vehicle.
        timestamp (int): The timestamp used in OTP generation.

    Returns:
        str: A simulated ZKP proof (hash of OTP and timestamp).

    Note:
        In a real scenario, this would call ZoKrates CLI or API to generate a proof.
        Here, we use a hash as a placeholder for demonstration.
    """
    # Combine OTP and timestamp, encode as bytes
    combined = f"{otp}{timestamp}".encode()
    # Hash the combined value to simulate a ZKP proof
    proof = hashlib.sha256(combined).hexdigest()
    return proof

def run_zokrates_compile(circuit_path):
    """
    Compile a ZoKrates circuit file.

    Args:
        circuit_path (str): Path to the ZoKrates .zok circuit file.

    Returns:
        bool: True if compilation succeeds, False otherwise.

    Side Effects:
        Prints ZoKrates CLI output or error message.
    """
    try:
        # Run the ZoKrates compile command with the given circuit file
        result = subprocess.run(
            ["zokrates", "compile", "-i", circuit_path],
            capture_output=True, text=True, check=True
        )
        # Print the output from ZoKrates
        print("ZoKrates compile output:", result.stdout)
        return True
    except Exception as e:
        # Print error if compilation fails
        print("ZoKrates compile failed:", e)
        return False

def run_zokrates_setup():
    """
    Run ZoKrates setup to generate proving and verification keys.

    Returns:
        bool: True if setup succeeds, False otherwise.

    Side Effects:
        Prints ZoKrates CLI output or error message.
    """
    try:
        # Run the ZoKrates setup command
        result = subprocess.run(
            ["zokrates", "setup"],
            capture_output=True, text=True, check=True
        )
        # Print the output from ZoKrates
        print("ZoKrates setup output:", result.stdout)
        return True
    except Exception as e:
        # Print error if setup fails
        print("ZoKrates setup failed:", e)
        return False

def run_zokrates_compute_witness(args):
    """
    Compute the witness for a ZoKrates circuit.

    Args:
        args (list of str): Arguments to pass to the circuit (e.g., private/public inputs).

    Returns:
        bool: True if witness computation succeeds, False otherwise.

    Side Effects:
        Prints ZoKrates CLI output or error message.
    """
    try:
        # Run the ZoKrates compute-witness command with arguments
        result = subprocess.run(
            ["zokrates", "compute-witness", "-a"] + args,
            capture_output=True, text=True, check=True
        )
        # Print the output from ZoKrates
        print("ZoKrates compute-witness output:", result.stdout)
        return True
    except Exception as e:
        # Print error if witness computation fails
        print("ZoKrates compute-witness failed:", e)
        return False

def run_zokrates_generate_proof():
    """
    Generate a ZoKrates proof using the computed witness and setup keys.

    Returns:
        bool: True if proof generation succeeds, False otherwise.

    Side Effects:
        Prints ZoKrates CLI output or error message.
    """
    try:
        # Run the ZoKrates generate-proof command
        result = subprocess.run(
            ["zokrates", "generate-proof"],
            capture_output=True, text=True, check=True
        )
        # Print the output from ZoKrates
        print("ZoKrates generate-proof output:", result.stdout)
        return True
    except Exception as e:
        # Print error if proof generation fails
        print("ZoKrates generate-proof failed:", e)
        return False

def run_zokrates_verify():
    """
    Verify a ZoKrates proof using the verification key.

    Returns:
        bool: True if the proof is valid, False otherwise.

    Side Effects:
        Prints ZoKrates CLI output or error message.
    """
    try:
        # Run the ZoKrates verify command
        result = subprocess.run(
            ["zokrates", "verify"],
            capture_output=True, text=True, check=True
        )
        # Print the output from ZoKrates
        print("ZoKrates verify output:", result.stdout)
        # Check if the output contains the success message
        return "Proof is valid" in result.stdout
    except Exception as e:
        # Print error if verification fails
        print("ZoKrates verify failed:", e)
        return False

